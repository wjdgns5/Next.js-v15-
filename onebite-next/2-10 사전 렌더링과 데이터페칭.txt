========================================
✅ 데이터 페칭(Data Fetching)이란?
========================================

- Data = 데이터
- Fetch = 가져오다

→ 브라우저(클라이언트)가 서버(API)에 요청(Request)을 보내고,
  응답(Response)으로 데이터를 받아오는 것

========================================
🔁 React App에서의 데이터 페칭 흐름
========================================

1. State 생성
   const [state, setState] = useState();

2. 데이터 페칭 함수 정의
   const fetchData = async () => {
     const response = await fetch("...");
     const data = await response.json();
     setState(data);
   };

3. 컴포넌트 마운트 시 호출
   useEffect(() => {
     fetchData();
   }, []);

4. 로딩 중 처리
   if (!state) return "Loading...";

========================================
❗ React 방식의 단점
========================================

- 컴포넌트가 먼저 실행된 뒤 JS가 실행되어 데이터 요청이 시작됨
- 데이터가 도착하기 전까지 빈 화면 또는 로딩 화면이 보임
- 사용자 입장에선 느려 보일 수 있음

========================================
✅ Next.js에서의 데이터 페칭
========================================

- 사전 렌더링(SSR/SSG/ISR) 중에 데이터 요청 발생
- HTML 안에 데이터가 포함되어 사용자에게 바로 보여줄 수 있음
- 컴포넌트 마운트 이후에도 추가 요청 가능

========================================
🧱 빌드타입 사전 렌더링이란?
========================================

- "빌드 시점(배포 전)"에 미리 HTML을 만들어 두는 방식
- 사용자가 접속하기 전에 페이지가 완성되어 있음
- 비유: 음식점에서 손님 오기 전에 미리 음식 만들어놓는 것

========================================
🚀 Next.js의 사전 렌더링 방식 비교
========================================

1. SSR (서버사이드 렌더링)
   - 요청마다 페이지를 서버에서 렌더링
   - 항상 최신 데이터를 보여줘야 할 때
   - 함수: getServerSideProps

2. SSG (정적 사이트 생성)
   - 빌드 시점에 HTML 생성 → 정적 페이지
   - 블로그, 마케팅 페이지에 적합
   - 함수: getStaticProps

3. ISR (증분 정적 재생성)
   - 정적 페이지 + 일정 주기로 갱신
   - 최신성 + 성능 모두 필요할 때
   - 함수: getStaticProps + revalidate 옵션

   예시:
   export async function getStaticProps() {
     const res = await fetch("...");
     const data = await res.json();
     return {
       props: { data },
       revalidate: 60 // 60초마다 갱신
     };
   }

========================================
📊 렌더링 방식 비교표
========================================

| 방식 | 생성 시점     | 데이터 신선도 | 특징             |
|------|----------------|----------------|------------------|
| SSR  | 요청마다       | 매우 최신       | 느릴 수 있음     |
| SSG  | 빌드 시점      | 고정됨          | 빠르고 안정적    |
| ISR  | 빌드 + 주기적  | 일정 시간마다 갱신 | 성능과 최신성 균형 |

